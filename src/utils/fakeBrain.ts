interface TimeZoneCity {
    name: string;
    offset: number;  // Offset en heures par rapport Ã  UTC
    keywords: string[];
}

const majorCities: TimeZoneCity[] = [
    { name: "Paris", offset: 1, keywords: ["france", "paris", "franÃ§aise", "mÃ©tropole"] },
    { name: "Londres", offset: 0, keywords: ["angleterre", "londres", "royaume-uni", "uk", "grande-bretagne"] },
    { name: "New York", offset: -5, keywords: ["new york", "Ã©tats-unis", "usa", "amÃ©rique", "manhattan"] },
    { name: "Tokyo", offset: 9, keywords: ["japon", "tokyo", "japonais"] },
    { name: "Sydney", offset: 10, keywords: ["australie", "sydney", "australien"] },
    { name: "Dubai", offset: 4, keywords: ["dubai", "Ã©mirats", "emirats", "uae"] },
    { name: "Moscou", offset: 3, keywords: ["russie", "moscou", "russe"] },
    { name: "PÃ©kin", offset: 8, keywords: ["chine", "pÃ©kin", "beijing", "chinois"] },
];

const timeRelatedWords = [
    "heure",
    "temps",
    "horloge",
    "maintenant",
    "actuellement"
];

const locationPrepositions = [
    "Ã ",
    "a",
    "en",
    "au",
    "aux",
    "dans"
];

const weatherRelatedWords = [
    "mÃ©tÃ©o",
    "meteo",
    "temps",
    "tempÃ©rature",
    "temperature",
    "climat",
    "pleut",
    "pluie",
    "soleil"
];

const positiveWords = [
    "super",
    "gÃ©nial",
    "cool",
    "merci",
    "bravo",
    "excellent",
    "parfait",
    "bien",
    "top",
    "sympa",
    "content",
    "heureux",
    "formidable",
    "extraordinaire",
    "fantastique"
];

const positiveResponses = [
    "Ravi que Ã§a vous plaise ! ğŸ˜Š",
    "C'est un plaisir de vous aider !",
    "Votre enthousiasme me fait plaisir !",
    "Super, on continue comme Ã§a ?",
    "Merci, c'est gentil ! Je fais de mon mieux.",
    "Ã‡a me fait plaisir de voir que vous Ãªtes content(e) !",
    "Ensemble, on forme une super Ã©quipe ! ğŸŒŸ",
    "C'est vraiment agrÃ©able d'Ã©changer avec vous !"
];

const commonExpressions = [
    "en forme",
    "d'accord",
    "ok",
    "content",
    "heureux",
    "fatiguÃ©",
    "prÃªt",
    "lÃ ",
    "disponible",
    "occupÃ©",
    "dÃ©solÃ©"
];

const getTimeInCity = (city: TimeZoneCity): string => {
    const now = new Date();
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    const cityTime = new Date(utc + (3600000 * city.offset));
    return `${cityTime.getHours()}:${String(cityTime.getMinutes()).padStart(2, '0')}`;
};

const nameQuestions = [
    "comment tu t'appelles",
    "quel est ton nom",
    "c'est quoi ton nom",
    "tu t'appelles comment",
    "dis-moi ton nom",
    "qui es-tu",
    "tu es qui",
    "prÃ©sente-toi"
];

const getWeatherUrl = (city: TimeZoneCity): string => {
    const cityName = encodeURIComponent(city.name);
    const url = `https://openweathermap.org/find?q=${cityName}`;
    return `<a href="${url}" target="_blank">sur ce lien</a>`;
};

const rickRollIframe = `<div style="display: flex; justify-content: center;"><iframe width="460" height="215" src="https://www.youtube.com/embed/dQw4w9WgXcQ?si=CmIjLRU1Oy92RC1a" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div>`;

const rickRollPhrases = [
    "Au fait, j'ai quelque chose d'intÃ©ressant Ã  te montrer :",
    "Tiens, regarde Ã§a, c'est super cool :",
    "Ã‡a me fait penser Ã  une vidÃ©o sympa :",
    "Hey, tu devrais voir Ã§a :",
    "J'ai trouvÃ© quelque chose qui pourrait t'intÃ©resser :"
];

const shouldAddRickRoll = (): boolean => {
    return Math.random() < 0.25; // 25% de chance
};

const appendRickRoll = (response: string): string => {
    if (shouldAddRickRoll()) {
        const randomPhrase = rickRollPhrases[Math.floor(Math.random() * rickRollPhrases.length)];
        return `${response}\n\n${randomPhrase}\n${rickRollIframe}`;
    }
    return response;
};

const nameIntroductions = [
    "je m'appelle",
    "je me prÃ©nomme",
    "mon nom est",
    "mon prÃ©nom est",
    "je suis",  // On garde "je suis" mais avec les vÃ©rifications existantes
];

const greetings = [
    "bonjour",
    "bonsoir",
    "salut",
    "hello",
    "coucou",
    "hey",
    "hi",
    "yo"
];

const getGreetingResponse = (): string => {
    const hour = new Date().getHours();
    
    if (hour >= 18 || hour < 5) {
        return "Bonsoir ! Comment puis-je vous aider ?";
    } else if (hour < 12) {
        return "Bonjour ! Bien matinal ! Que puis-je faire pour vous ?";
    } else {
        return "Bonjour ! Comment puis-je vous aider ?";
    }
};

const defaultSuggestions = [
    "Faisons connaissance !",
    "Je peux vous donner l'heure dans diffÃ©rentes villes du monde. Une ville vous intÃ©resse ?",
    "Voulez-vous connaÃ®tre la mÃ©tÃ©o quelque part ?",
    "Je peux vous dire l'heure qu'il est, Ã§a vous intÃ©resse ?",
    "Si vous me dites votre nom, on pourra faire connaissance !",
    "Je peux vous montrer la mÃ©tÃ©o de plusieurs villes, vous voulez essayer ?",
    "Au fait, connaissez-vous le Rick Roll ?",
];

const helpKeywords = [
    "que peux-tu faire",
    "help",
    "aide",
    "menu",
    "options",
    "commandes",
    "fonctionnalitÃ©s",
    "capabilities",
    "quelles sont tes fonctions",
    "tu fais quoi",
    "Ã  quoi sers-tu",
    "que sais-tu faire",
    "montre-moi ce que tu sais faire",
    "quels sont tes talents",
    "de quoi es-tu capable",
    "comment peux-tu m'aider",
    "que proposes-tu",
    "quels services proposes-tu",
    "explique-moi ce que tu fais",
    "prÃ©sente tes fonctions",
    "tes capacitÃ©s",
    "guide",
    "manuel",
    "mode d'emploi",
    "comment Ã§a marche",
    "comment t'utiliser",
    "que puis-je te demander",
    "qu'est-ce que tu peux faire",
    "montre-moi tes options",
    "besoin d'aide"
];

const getAllSuggestions = (): string => {
    return `Je peux faire plusieurs choses :
    <ul>
        <li>Vous donner l'heure dans diffÃ©rentes villes du monde</li>
        <li>Vous montrer la mÃ©tÃ©o de plusieurs villes</li>
        <li>Faire connaissance et retenir votre nom</li>
        <li>Discuter de maniÃ¨re polie (bonjour, au revoir, etc.)</li>
        <li>Et peut-Ãªtre mÃªme vous surprendre avec une vidÃ©o intÃ©ressante ğŸ˜‰</li>
    </ul>
    N'hÃ©sitez pas Ã  essayer !`;
};

const isCityOnly = (message: string): TimeZoneCity | null => {
    const words = message.split(/\s+/);
    // Si le message fait plus de 2 mots, ce n'est probablement pas juste une ville
    if (words.length > 2) return null;
    
    return majorCities.find(city => 
        city.keywords.some(keyword => 
            message === keyword || 
            message.includes(keyword) && words.length <= 2
        )
    ) || null;
};

export const getAIResponse = (message: string): string => {
    const lowerMessage = message.toLowerCase().trim();
    let response = "";
    
    // DÃ©tection des salutations - Ã  placer en premier
    if (greetings.some(greeting => lowerMessage.includes(greeting))) {
        response = getGreetingResponse();
        return appendRickRoll(response);
    }

    // DÃ©tection de rÃ©ponse concernant le Rick Roll
    if (lowerMessage.includes("rick") || lowerMessage.includes("roll")) {
        return `Ah ! Vous allez adorer Ã§a ! ğŸ˜ˆ\n${rickRollIframe}`;
    }

    // DÃ©tection des questions sur le nom de l'IA
    if (nameQuestions.some(question => lowerMessage.includes(question))) {
        response = "Je m'appelle Bot. Et vous, comment vous appelez-vous ?";
        return appendRickRoll(response);
    }
    
    // DÃ©tection quand l'utilisateur donne son nom - version plus stricte
    if (nameIntroductions.some(intro => lowerMessage.startsWith(intro)) || 
        (lowerMessage.includes("je suis") && !commonExpressions.some(expr => lowerMessage.includes(expr)))
    ) {
        const words = lowerMessage.split(/\s+/);
        
        // Recherche du nom aprÃ¨s les expressions d'introduction
        const nameIndex = words.findIndex(w => 
            w === "m'appelle" || 
            w === "prÃ©nomme" ||
            (w === "suis" && !commonExpressions.some(expr => lowerMessage.includes(expr))) || 
            ((w === "nom" || w === "prÃ©nom") && words[words.indexOf(w) + 1] === "est")
        );
        
        if (nameIndex !== -1 && words[nameIndex + 1] && !positiveWords.includes(words[nameIndex + 1])) {
            // VÃ©rifie que ce qui suit n'est pas une expression commune
            const potentialName = words.slice(nameIndex + 1).join(" ");
            if (!commonExpressions.some(expr => potentialName.includes(expr))) {
                const name = words[nameIndex + 1];
                return appendRickRoll(`EnchantÃ© ${name} ! Comment puis-je vous aider ?`);
            }
        }
    }

    // VÃ©rification si le message est juste une ville
    const cityOnly = isCityOnly(lowerMessage);
    if (cityOnly) {
        const time = getTimeInCity(cityOnly);
        const weatherUrl = getWeatherUrl(cityOnly);
        return `Pour ${cityOnly.name} l'heure est ${time} et la mÃ©tÃ©o est disponible sur ${weatherUrl}`;
    }

    // Si le message contient des mots positifs
    if (positiveWords.some(word => lowerMessage.includes(word))) {
        const randomIndex = Math.floor(Math.random() * positiveResponses.length);
        return positiveResponses[randomIndex];
    }

    // Si la question concerne l'heure
    if (timeRelatedWords.some(word => lowerMessage.includes(word))) {
        // Analyse plus prÃ©cise pour trouver la ville/pays
        const words = lowerMessage.split(/\s+/);
        let targetLocation = null;

        // Cherche une sÃ©quence "prÃ©position + lieu"
        for (let i = 0; i < words.length - 1; i++) {
            if (locationPrepositions.includes(words[i])) {
                const locationPhrase = words.slice(i + 1, i + 3).join(" ");
                targetLocation = majorCities.find(city => 
                    city.keywords.some(keyword => 
                        locationPhrase.includes(keyword) || 
                        keyword.includes(locationPhrase)
                    )
                );
                if (targetLocation) break;
            }
        }

        // Si pas trouvÃ© avec les prÃ©positions, cherche directement les mots-clÃ©s
        if (!targetLocation) {
            targetLocation = majorCities.find(city => 
                city.keywords.some(keyword => lowerMessage.includes(keyword))
            );
        }

        if (targetLocation) {
            return `Il est ${getTimeInCity(targetLocation)} Ã  ${targetLocation.name}`;
        }

        // Si on dÃ©tecte une question sur l'heure mais sans lieu prÃ©cis
        if (words.some(w => locationPrepositions.includes(w))) {
            // Si une prÃ©position de lieu est prÃ©sente mais pas de ville reconnue
            return "Je n'ai pas reconnu la ville ou le pays. Pouvez-vous me prÃ©ciser la ville ou le pays dont vous souhaitez connaÃ®tre l'heure ?";
        }

        // Si c'est une question d'heure gÃ©nÃ©rale
        const now = new Date();
        const localTime = `${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`;
        return `Il est ${localTime}. Si cela ne correspond pas Ã  votre fuseau horaire, prÃ©cisez le pays ou la capitale.`;
    } 
    
    // Si la question concerne la mÃ©tÃ©o
    if (weatherRelatedWords.some(word => lowerMessage.includes(word))) {
        const words = lowerMessage.split(/\s+/);
        let targetLocation = null;

        // RÃ©utilisation de la mÃªme logique de dÃ©tection de ville que pour l'heure
        for (let i = 0; i < words.length - 1; i++) {
            if (locationPrepositions.includes(words[i])) {
                const locationPhrase = words.slice(i + 1, i + 3).join(" ");
                targetLocation = majorCities.find(city => 
                    city.keywords.some(keyword => 
                        locationPhrase.includes(keyword) || 
                        keyword.includes(locationPhrase)
                    )
                );
                if (targetLocation) break;
            }
        }

        if (!targetLocation) {
            targetLocation = majorCities.find(city => 
                city.keywords.some(keyword => lowerMessage.includes(keyword))
            );
        }

        if (targetLocation) {
            const weatherUrl = getWeatherUrl(targetLocation);
            return `Voici la mÃ©tÃ©o pour ${targetLocation.name} : ${weatherUrl}`;
        }

        return "Pour quelle ville souhaitez-vous connaÃ®tre la mÃ©tÃ©o ?";
    }
    
    // DÃ©tection des demandes d'aide - Ã  placer aprÃ¨s les salutations
    if (helpKeywords.some(keyword => lowerMessage.includes(keyword))) {
        response = getAllSuggestions();
        return appendRickRoll(response);
    }
    
    // RÃ©ponse par dÃ©faut avec suggestion alÃ©atoire
    const randomSuggestion = defaultSuggestions[Math.floor(Math.random() * defaultSuggestions.length)];
    response = `Je ne suis pas sÃ»r de comprendre... ${randomSuggestion}`;
    return appendRickRoll(response);
};
